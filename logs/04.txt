
> # Paths ---------------------------------------------
> 
> # relative to this file
> # although you can specify an absolute path if you wish.
> data .... [TRUNCATED] 

> temperature_dir <- file.path(data_dir, 'raw/weather')

> sunshine_dir <- file.path(data_dir, 'raw/sunshine')

> # constants ---------------------------------------------------------------
> 
> 
> Sys.setenv(TZ='UTC') # see README.md

> # AEMO data is in "Market time"
> # that's this time zone
> # (No DST, just UTC+10)
> market_tz <- "Australia/Brisbane"

> # South Australia is permanently behind VIC, NSW, TAS by this much
> # (They shift forward/back on the same day by the same amount)
> SA_offset <- m .... [TRUNCATED] 

> # kilograms per tonne
> kg_per_t <- 1000

> # grams per kilogram
> g_per_kg <- 1000

> # kil-mega-giga watt hour conversion ratios
> wh_per_kwh <- 1000

> kwh_per_mwh <- 1000

> mwh_per_gwh <- 1000

> gwh_per_twh <- 1000

> mwh_per_twh <- mwh_per_gwh * gwh_per_twh

> # minutes per half hour
> min_per_hh <- 30

> # minutes per hour
> min_per_h <- 60

> # Unit conversions:
> # 1 Joule = 1 watt second
> # 1 MJ = 10^6 Ws = 10^3 kWs = 10^3 / 60^2 kWh
> # uppercase M not lowercase, to make it clear this .... [TRUNCATED] 

> # Define the city-region mapping, for weather data to AEMO regions
> # The first one is for capital cities.
> # This is for temperature, which drive .... [TRUNCATED] 

> regional_city_region_map <- c(
+   'cooberpedy' = 'SA1',
+   'richmond' = 'QLD1',
+   'dubbo' = 'NSW1',
+   'bendigo'= 'VIC1',
+   'hobart' = 'TAS1' .... [TRUNCATED] 

> # we are joining lots of different datasets
> # with many different start/end dates
> # the intersection we are aiming for is: (inclusive)
> start_d .... [TRUNCATED] 

> end_date <- make_date(2023, 12, 1)

> # load energy source data --------------------------------------------------------
> 
> energy <- read_parquet(file.path(data_dir, "01-F-aemo-joined ..." ... [TRUNCATED] 

> # Local time, midday control and other time info --------------------------------------
> 
> # We want to convert fixed Brisbane UTC+10 time to loca .... [TRUNCATED] 

> df <- energy |>
+   left_join(region_tz, by=c("regionid")) |>
+   group_by(regionid) |>
+   mutate(
+     hh_end_fixed = force_tz(hh_end, tzone = "A ..." ... [TRUNCATED] 

> # Public Holidays ---------------------------------------------------------
> # we read public holiday data from two files
> # because neither one o .... [TRUNCATED] 
[1mindexing[0m [34mAus_public_hols_2009-2022-1.csv[0m [=================] [32m2.07GB/s[0m, eta: [36m 0s[0m                                                                                                                  
> holidays_2 <- read_csv(file.path(data_dir, "raw/holidays/australian-public-holidays-combined-2021-2024.csv")) |>
+   rename(State=Jurisdiction) |>
+ .... [TRUNCATED] 
[1mindexing[0m [34maustralian-public-holidays-combined-2021-2024.csv[0m [] [32m3.81GB/s[0m, eta: [36m 0s[0m                                                                                                                  
> holidays <- rbind(holidays_1, holidays_2) |>
+   mutate(
+     regionid = paste0(str_to_upper(State), "1"),
+   ) |>
+   select(-State) |>
+   disti .... [TRUNCATED] 

> df <- holidays |>
+   rename(date_local=Date) |>
+   mutate(public_holiday=TRUE) |>
+   right_join(df, by=c("date_local", "regionid")) |> 
+   repla .... [TRUNCATED] 

> # Join DST data to energy -------------------------------------------------
> 
> # dst_transitions has one row per clock change
> # we want to trans .... [TRUNCATED] 
[1mindexing[0m [34m02-dst-dates.csv[0m [===============================] [32m46.36MB/s[0m, eta: [36m 0s[0m                                                                                                                  
> dst_transitions <- dst_transitions |>
+   rename(
+     dst_date = date,
+     dst_direction = direction) |>
+   mutate(
+     dst_direction = facto .... [TRUNCATED] 

> # create a tibble with all dates we care about
> # (plus extra)
> # and the info for the nearest DST transition
> # to make joins later
> dst_dates_ .... [TRUNCATED] 

> # now join DST info to main dataframe
> 
> df <- dst_dates_all |>
+   rename(date_local=d) |>
+   right_join(df, by="date_local") |>
+   mutate(
+   .... [TRUNCATED] 

> no_dst_info <- df |> filter(is.na(dst_now_here))

> stopifnot((no_dst_info |> nrow()) == 0)

> # In our time period, there's one particular day
> # that's 94 days into DST, and one that's -94
> # because the duration of DST (or not) differs sl .... [TRUNCATED] 

> samples_per_days_into_dst <- df |> summarise(n=n(), .by=days_into_dst)

> typical_sample_count <- samples_per_days_into_dst |> pull(n) |> abs() |> median()

> outlier_days <- samples_per_days_into_dst |> filter(abs(n) < typical_sample_count) |> pull(days_into_dst)

> df$days_into_dst_outlier <- df$days_into_dst %in% outlier_days

> # Add population ----------------------------------------------------------
> 
> # Load data
> population_raw <- read_csv(file.path(data_dir, "raw/p ..." ... [TRUNCATED] 
[1mindexing[0m [34mpopulation-australia-raw.csv[0m [====================] [32m2.20GB/s[0m, eta: [36m 0s[0m                                                                                                                  
> # First data cleaning
> # Doesn't work with |> instead of  %>%
> # because of (.)
> population <- population_raw %>%
+   select(1, (ncol(.) - 8):nco .... [TRUNCATED] 

> colnames(population) <- c("Date", "NSW1", "VIC1", "QLD1", "SA1", "WA1", "TAS1", "NT1", "ACT1","AUS")

> # Cast to numbers
> population[2:ncol(population)] <- lapply(population[2:ncol(population)], as.numeric)

> # Include Australian Capital Territory in New South Wales
> population$NSW1 <- population$NSW1 + population$ACT1

> # drop regions that aren't part of the study
> population <- population |> select(-c(ACT1, AUS, NT1, WA1))

> # Transform dates to datetime format
> population <- population |>
+   mutate(Date = parse_date(Date, "%b-%Y"))|>
+   filter(between(Date, start_dat .... [TRUNCATED] 

> # Pivot the dataframe to have one column per state
> population <- population |> pivot_longer(cols = -Date, names_to = "regionid", values_to = "popu ..." ... [TRUNCATED] 

> # now linearly interpolate the 3-month data into daily
> # Note that since our main electrical dataset ends on 31st December
> # and this population .... [TRUNCATED] 

> # join to main dataframe
> df <- population |>
+   rename(date_local=Date) |>
+   right_join(df, by=c("regionid", "date_local"))

> # add temperature ---------------------------------------------------------
> 
> 
> # Define the clean and combine function for temperature data
> c .... [TRUNCATED] 

> # Create Temperature Dataframe 
> # Loop through each CSV file in the directory 
> all_temperature <- list()

> for (file_name in list.files(temperature_dir, pattern = "\\.csv$", full.names = TRUE)) {
+   all_temperature[[length(all_temperature) + 1]] <- clean .... [TRUNCATED] 
[1mindexing[0m [34mweather_adelaide.csv[0m [===========================] [32m46.88GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for SA1
[1mindexing[0m [34mweather_brisbane.csv[0m [===========================] [32m17.71GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for QLD1
[1mindexing[0m [34mweather_hobart.csv[0m [===========================--] [32m87.08GB/s[0m, eta: [36m 0s[0m[1mindexing[0m [34mweather_hobart.csv[0m [==============================] [32m2.04GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for TAS1
[1mindexing[0m [34mweather_melbourne.csv[0m [==========================] [32m45.66GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for VIC1
[1mindexing[0m [34mweather_sydney.csv[0m [=============================] [32m52.37GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for NSW1

> # check that we have found some data
> # (i.e. source data not silently missing)
> stopifnot(length(all_temperature) > 0)

> # Merge all temperature data frames
> temperature <- bind_rows(all_temperature)

> # Fill in gaps which are larger than one day in a row by interpolating linearly 
> temperature <- temperature |>
+   group_by(regionid) |>
+   mutat .... [TRUNCATED] 

> # join to main dataframe
> df <- left_join(df, temperature, by=c("regionid", "date_local"))

> # add sunshine ------------------------------------------------------------
> 
> # Define the clean and combine function for sunshine data
> clean_a .... [TRUNCATED] 

> #Create Sunshine Dataframe
> all_sunshine <- list()

> for (file_name in list.files(sunshine_dir, pattern = "\\.csv$", full.names = TRUE)) {
+   all_sunshine[[length(all_sunshine) + 1]] <- clean_and_comb .... [TRUNCATED] 
[1mindexing[0m [34msunshine-bendigo.csv[0m [===========================] [32m14.32GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city bendigo , found  VIC1"
Data cleaned and added to list for VIC1
[1mindexing[0m [34msunshine-cooberpedy.csv[0m [========================] [32m25.58GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city cooberpedy , found  SA1"
Data cleaned and added to list for SA1
[1mindexing[0m [34msunshine-dubbo.csv[0m [=============================] [32m22.65GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city dubbo , found  NSW1"
Data cleaned and added to list for NSW1
[1mindexing[0m [34msunshine-hobart.csv[0m [=============================] [32m8.95GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city hobart , found  TAS1"
Data cleaned and added to list for TAS1
[1mindexing[0m [34msunshine-richmond.csv[0m [==========================] [32m25.61GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city richmond , found  QLD1"
Data cleaned and added to list for QLD1

> # check that we have found some data
> # (i.e. source data not silently missing)
> stopifnot(length(all_sunshine) > 0)

> # Merge all sunshine data frames
> sunshine <- bind_rows(all_sunshine)

> # Fill in gaps which are larger than one day in a row by interpolating linearly 
> sunshine <- sunshine |>
+   group_by(regionid) |>
+   mutate(sola .... [TRUNCATED] 

> # join to main dataframe
> df <- left_join(df, sunshine, by=c("regionid", "date_local"))

> # Wind data ---------------------------------------------------------------
> 
> 
> # fill in that one gap, linear interpolation
> wind <- read_csv( .... [TRUNCATED] 
[1mindexing[0m [34m05-wind.csv[0m [====================================] [32m27.96GB/s[0m, eta: [36m 0s[0m                                                                                                                  
> # we're missing a lot of max wind speed data
> # but only one average wind speed record
> stopifnot(sum(is.na(wind$avg_wind_speed_km_per_h)) <= 1)

> wind <- wind |>
+   group_by(regionid) |>
+   arrange(date) |>
+   mutate(avg_wind_speed_km_per_h = zoo::na.approx(avg_wind_speed_km_per_h, na.rm =  .... [TRUNCATED] 

> # Fill in gaps which are larger than one day in a row by interpolating linearly 
> wind <- wind |>
+   group_by(regionid) |>
+   complete(date_local .... [TRUNCATED] 

> # add to main dataframe
> df <- df |>
+   left_join(wind, by=c("date_local", "regionid"))

> # Per capita calculations -------------------------------------------------
> 
> # do division to get per-capita 
> # also normalise values by chang .... [TRUNCATED] 

> # add midday float --------------------------------------------------------
> # we already have a dummy column for if this half our is a midday cont .... [TRUNCATED] 

> df <- df |>
+   left_join(midday_emissions, by=c("regionid", "date_local")) |>
+   mutate(
+     energy_wh_per_capita_vs_midday=(energy_kwh_per_capi .... [TRUNCATED] 

> # tidy up -----------------------------------------------------------------
> 
> 
> # our weather data, AEMO data etc
> # has slightly different end .... [TRUNCATED] 

> # missing data final check ------------------------------------------------
> 
> # check data has no unexpected holes
> # we know rooftop solar data .... [TRUNCATED] 

> missing <- missing[(missing > 0) & !grepl("rooftop", names(df))]

> stopifnot(length(missing) == 0)

> # Save output -------------------------------------------------------------
> # CSV for stata
> # parquet for the next R script
> 
> 
> write_csv(df .... [TRUNCATED] 
[1mwrote[0m [32m5.83MB[0m in [36m 0s[0m, [32m277.68GB/s[0m[1mwrote[0m [32m81.47MB[0m in [36m 0s[0m, [32m373.85MB/s[0m[1mwrote[0m [32m87.34MB[0m in [36m 0s[0m, [32m382.53MB/s[0m[1mwrote[0m [32m93.18MB[0m in [36m 0s[0m, [32m368.07MB/s[0m[1mwrote[0m [32m99.00MB[0m in [36m 0s[0m, [32m376.01MB/s[0m[1mwrote[0m [32m104.81MB[0m in [36m 0s[0m, [32m374.25MB/s[0m[1mwrote[0m [32m110.62MB[0m in [36m 0s[0m, [32m363.46MB/s[0m[1mwrote[0m [32m116.39MB[0m in [36m 0s[0m, [32m370.94MB/s[0m[1mwrote[0m [32m122.22MB[0m in [36m 0s[0m, [32m360.28MB/s[0m[1mwrote[0m [32m128.09MB[0m in [36m 0s[0m, [32m366.67MB/s[0m[1mwrote[0m [32m133.93MB[0m in [36m 0s[0m, [32m363.09MB/s[0m[1mwrote[0m [32m139.75MB[0m in [36m 0s[0m, [32m365.40MB/s[0m[1mwrote[0m [32m145.56MB[0m in [36m 0s[0m, [32m361.84MB/s[0m[1mwrote[0m [32m151.37MB[0m in [36m 0s[0m, [32m363.41MB/s[0m[1mwrote[0m [32m157.17MB[0m in [36m 0s[0m, [32m360.99MB/s[0m[1mwrote[0m [32m162.99MB[0m in [36m 0s[0m, [32m366.09MB/s[0m[1mwrote[0m [32m168.73MB[0m in [36m 0s[0m, [32m360.33MB/s[0m[1mwrote[0m [32m174.43MB[0m in [36m 0s[0m, [32m362.92MB/s[0m[1mwrote[0m [32m180.15MB[0m in [36m 0s[0m, [32m363.39MB/s[0m[1mwrote[0m [32m185.96MB[0m in [36m 1s[0m, [32m360.71MB/s[0m[1mwrote[0m [32m191.77MB[0m in [36m 1s[0m, [32m365.33MB/s[0m[1mwrote[0m [32m197.59MB[0m in [36m 1s[0m, [32m359.85MB/s[0m[1mwrote[0m [32m203.36MB[0m in [36m 1s[0m, [32m361.94MB/s[0m[1mwrote[0m [32m209.14MB[0m in [36m 1s[0m, [32m358.75MB/s[0m[1mwrote[0m [32m214.86MB[0m in [36m 1s[0m, [32m356.22MB/s[0m[1mwrote[0m [32m220.58MB[0m in [36m 1s[0m, [32m352.76MB/s[0m[1mwrote[0m [32m226.37MB[0m in [36m 1s[0m, [32m350.90MB/s[0m[1mwrote[0m [32m232.06MB[0m in [36m 1s[0m, [32m352.29MB/s[0m[1mwrote[0m [32m237.78MB[0m in [36m 1s[0m, [32m349.32MB/s[0m[1mwrote[0m [32m243.52MB[0m in [36m 1s[0m, [32m351.67MB/s[0m[1mwrote[0m [32m249.32MB[0m in [36m 1s[0m, [32m346.36MB/s[0m[1mwrote[0m [32m255.04MB[0m in [36m 1s[0m, [32m349.60MB/s[0m[1mwrote[0m [32m260.76MB[0m in [36m 1s[0m, [32m344.09MB/s[0m[1mwrote[0m [32m266.55MB[0m in [36m 1s[0m, [32m343.46MB/s[0m[1mwrote[0m [32m272.35MB[0m in [36m 1s[0m, [32m345.45MB/s[0m[1mwrote[0m [32m278.16MB[0m in [36m 1s[0m, [32m341.66MB/s[0m[1mwrote[0m [32m283.90MB[0m in [36m 1s[0m, [32m342.88MB/s[0m[1mwrote[0m [32m289.89MB[0m in [36m 1s[0m, [32m338.11MB/s[0m[1mwrote[0m [32m295.94MB[0m in [36m 1s[0m, [32m340.91MB/s[0m[1mwrote[0m [32m301.96MB[0m in [36m 1s[0m, [32m335.48MB/s[0m[1mwrote[0m [32m308.06MB[0m in [36m 1s[0m, [32m336.71MB/s[0m[1mwrote[0m [32m314.16MB[0m in [36m 1s[0m, [32m336.01MB/s[0m[1mwrote[0m [32m320.27MB[0m in [36m 1s[0m, [32m333.66MB/s[0m[1mwrote[0m [32m326.30MB[0m in [36m 1s[0m, [32m333.72MB/s[0m[1mwrote[0m [32m332.38MB[0m in [36m 1s[0m, [32m335.72MB/s[0m[1mwrote[0m [32m338.45MB[0m in [36m 1s[0m, [32m332.17MB/s[0m[1mwrote[0m [32m344.57MB[0m in [36m 1s[0m, [32m332.78MB/s[0m[1mwrote[0m [32m350.68MB[0m in [36m 1s[0m, [32m331.09MB/s[0m[1mwrote[0m [32m356.73MB[0m in [36m 2s[0m, [32m203.26MB/s[0m[1mwrote[0m [32m362.73MB[0m in [36m 2s[0m, [32m202.42MB/s[0m[1mwrote[0m [32m368.73MB[0m in [36m 2s[0m, [32m204.61MB/s[0m[1mwrote[0m [32m374.77MB[0m in [36m 2s[0m, [32m204.15MB/s[0m[1mwrote[0m [32m380.84MB[0m in [36m 2s[0m, [32m206.10MB/s[0m[1mwrote[0m [32m386.92MB[0m in [36m 2s[0m, [32m206.67MB/s[0m[1mwrote[0m [32m393.01MB[0m in [36m 2s[0m, [32m208.13MB/s[0m[1mwrote[0m [32m399.08MB[0m in [36m 2s[0m, [32m208.94MB/s[0m[1mwrote[0m [32m405.15MB[0m in [36m 2s[0m, [32m211.01MB/s[0m[1mwrote[0m [32m411.24MB[0m in [36m 2s[0m, [32m211.31MB/s[0m[1mwrote[0m [32m417.30MB[0m in [36m 2s[0m, [32m213.09MB/s[0m[1mwrote[0m [32m423.37MB[0m in [36m 2s[0m, [32m213.98MB/s[0m[1mwrote[0m [32m429.42MB[0m in [36m 2s[0m, [32m215.43MB/s[0m[1mwrote[0m [32m435.43MB[0m in [36m 2s[0m, [32m216.23MB/s[0m[1mwrote[0m [32m441.43MB[0m in [36m 2s[0m, [32m217.89MB/s[0m[1mwrote[0m [32m447.55MB[0m in [36m 2s[0m, [32m218.39MB/s[0m[1mwrote[0m [32m453.68MB[0m in [36m 2s[0m, [32m219.95MB/s[0m[1mwrote[0m [32m459.76MB[0m in [36m 2s[0m, [32m220.27MB/s[0m[1mwrote[0m [32m465.84MB[0m in [36m 2s[0m, [32m221.79MB/s[0m[1mwrote[0m [32m471.94MB[0m in [36m 2s[0m, [32m222.24MB/s[0m[1mwrote[0m [32m477.94MB[0m in [36m 2s[0m, [32m224.01MB/s[0m[1mwrote[0m [32m483.94MB[0m in [36m 2s[0m, [32m223.74MB/s[0m[1mwrote[0m [32m489.93MB[0m in [36m 2s[0m, [32m225.49MB/s[0m[1mwrote[0m [32m496.01MB[0m in [36m 2s[0m, [32m225.52MB/s[0m[1mwrote[0m [32m502.18MB[0m in [36m 2s[0m, [32m226.79MB/s[0m[1mwrote[0m [32m508.31MB[0m in [36m 2s[0m, [32m227.60MB/s[0m[1mwrote[0m [32m514.46MB[0m in [36m 2s[0m, [32m228.45MB/s[0m[1mwrote[0m [32m520.57MB[0m in [36m 2s[0m, [32m229.51MB/s[0m[1mwrote[0m [32m526.64MB[0m in [36m 2s[0m, [32m230.95MB/s[0m[1mwrote[0m [32m532.71MB[0m in [36m 2s[0m, [32m231.09MB/s[0m[1mwrote[0m [32m538.72MB[0m in [36m 2s[0m, [32m232.40MB/s[0m[1mwrote[0m [32m544.79MB[0m in [36m 2s[0m, [32m232.16MB/s[0m[1mwrote[0m [32m550.91MB[0m in [36m 2s[0m, [32m233.69MB/s[0m[1mwrote[0m [32m556.95MB[0m in [36m 2s[0m, [32m233.79MB/s[0m[1mwrote[0m [32m562.97MB[0m in [36m 2s[0m, [32m234.88MB/s[0m[1mwrote[0m [32m569.00MB[0m in [36m 2s[0m, [32m235.91MB/s[0m[1mwrote[0m [32m575.00MB[0m in [36m 2s[0m, [32m235.95MB/s[0m[1mwrote[0m [32m581.04MB[0m in [36m 2s[0m, [32m237.31MB/s[0m[1mwrote[0m [32m587.13MB[0m in [36m 2s[0m, [32m238.08MB/s[0m[1mwrote[0m [32m593.21MB[0m in [36m 2s[0m, [32m239.15MB/s[0m                                                                             [1mwrote[0m [32m1.00TB[0m in [36m 2s[0m, [32m403.09GB/s[0m                                                                             
> write_parquet(df, sink = file.path(data_dir, "10-half-hourly.parquet"))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
> # Paths ---------------------------------------------
> 
> # relative to this file
> # although you can specify an absolute path if you wish.
> data .... [TRUNCATED] 

> temperature_dir <- file.path(data_dir, 'raw/weather')

> sunshine_dir <- file.path(data_dir, 'raw/sunshine')

> # constants ---------------------------------------------------------------
> 
> 
> Sys.setenv(TZ='UTC') # see README.md

> # AEMO data is in "Market time"
> # that's this time zone
> # (No DST, just UTC+10)
> market_tz <- "Australia/Brisbane"

> # South Australia is permanently behind VIC, NSW, TAS by this much
> # (They shift forward/back on the same day by the same amount)
> SA_offset <- m .... [TRUNCATED] 

> # kilograms per tonne
> kg_per_t <- 1000

> # grams per kilogram
> g_per_kg <- 1000

> # kil-mega-giga watt hour conversion ratios
> wh_per_kwh <- 1000

> kwh_per_mwh <- 1000

> mwh_per_gwh <- 1000

> gwh_per_twh <- 1000

> mwh_per_twh <- mwh_per_gwh * gwh_per_twh

> # minutes per half hour
> min_per_hh <- 30

> # minutes per hour
> min_per_h <- 60

> # Unit conversions:
> # 1 Joule = 1 watt second
> # 1 MJ = 10^6 Ws = 10^3 kWs = 10^3 / 60^2 kWh
> # uppercase M not lowercase, to make it clear this .... [TRUNCATED] 

> # Define the city-region mapping, for weather data to AEMO regions
> # The first one is for capital cities.
> # This is for temperature, which drive .... [TRUNCATED] 

> regional_city_region_map <- c(
+   'cooberpedy' = 'SA1',
+   'richmond' = 'QLD1',
+   'dubbo' = 'NSW1',
+   'bendigo'= 'VIC1',
+   'hobart' = 'TAS1' .... [TRUNCATED] 

> # we are joining lots of different datasets
> # with many different start/end dates
> # the intersection we are aiming for is: (inclusive)
> start_d .... [TRUNCATED] 

> end_date <- make_date(2023, 12, 1)

> # load energy source data --------------------------------------------------------
> 
> energy <- read_parquet(file.path(data_dir, "01-F-aemo-joined ..." ... [TRUNCATED] 

> # Local time, midday control and other time info --------------------------------------
> 
> # We want to convert fixed Brisbane UTC+10 time to loca .... [TRUNCATED] 

> df <- energy |>
+   left_join(region_tz, by=c("regionid")) |>
+   group_by(regionid) |>
+   mutate(
+     hh_end_fixed = force_tz(hh_end, tzone = "A ..." ... [TRUNCATED] 

> # Public Holidays ---------------------------------------------------------
> # we read public holiday data from two files
> # because neither one o .... [TRUNCATED] 
[1mindexing[0m [34mAus_public_hols_2009-2022-1.csv[0m [=================] [32m2.07GB/s[0m, eta: [36m 0s[0m                                                                                                                  
> holidays_2 <- read_csv(file.path(data_dir, "raw/holidays/australian-public-holidays-combined-2021-2024.csv")) |>
+   rename(State=Jurisdiction) |>
+ .... [TRUNCATED] 
[1mindexing[0m [34maustralian-public-holidays-combined-2021-2024.csv[0m [] [32m3.81GB/s[0m, eta: [36m 0s[0m                                                                                                                  
> holidays <- rbind(holidays_1, holidays_2) |>
+   mutate(
+     regionid = paste0(str_to_upper(State), "1"),
+   ) |>
+   select(-State) |>
+   disti .... [TRUNCATED] 

> df <- holidays |>
+   rename(date_local=Date) |>
+   mutate(public_holiday=TRUE) |>
+   right_join(df, by=c("date_local", "regionid")) |> 
+   repla .... [TRUNCATED] 

> # Join DST data to energy -------------------------------------------------
> 
> # dst_transitions has one row per clock change
> # we want to trans .... [TRUNCATED] 
[1mindexing[0m [34m02-dst-dates.csv[0m [===============================] [32m46.36MB/s[0m, eta: [36m 0s[0m                                                                                                                  
> dst_transitions <- dst_transitions |>
+   rename(
+     dst_date = date,
+     dst_direction = direction) |>
+   mutate(
+     dst_direction = facto .... [TRUNCATED] 

> # create a tibble with all dates we care about
> # (plus extra)
> # and the info for the nearest DST transition
> # to make joins later
> dst_dates_ .... [TRUNCATED] 

> # now join DST info to main dataframe
> 
> df <- dst_dates_all |>
+   rename(date_local=d) |>
+   right_join(df, by="date_local") |>
+   mutate(
+   .... [TRUNCATED] 

> no_dst_info <- df |> filter(is.na(dst_now_here))

> stopifnot((no_dst_info |> nrow()) == 0)

> # In our time period, there's one particular day
> # that's 94 days into DST, and one that's -94
> # because the duration of DST (or not) differs sl .... [TRUNCATED] 

> samples_per_days_into_dst <- df |> summarise(n=n(), .by=days_into_dst)

> typical_sample_count <- samples_per_days_into_dst |> pull(n) |> abs() |> median()

> outlier_days <- samples_per_days_into_dst |> filter(abs(n) < typical_sample_count) |> pull(days_into_dst)

> df$days_into_dst_outlier <- df$days_into_dst %in% outlier_days

> # Add population ----------------------------------------------------------
> 
> # Load data
> population_raw <- read_csv(file.path(data_dir, "raw/p ..." ... [TRUNCATED] 
[1mindexing[0m [34mpopulation-australia-raw.csv[0m [====================] [32m2.20GB/s[0m, eta: [36m 0s[0m                                                                                                                  
> # First data cleaning
> # Doesn't work with |> instead of  %>%
> # because of (.)
> population <- population_raw %>%
+   select(1, (ncol(.) - 8):nco .... [TRUNCATED] 

> colnames(population) <- c("Date", "NSW1", "VIC1", "QLD1", "SA1", "WA1", "TAS1", "NT1", "ACT1","AUS")

> # Cast to numbers
> population[2:ncol(population)] <- lapply(population[2:ncol(population)], as.numeric)

> # Include Australian Capital Territory in New South Wales
> population$NSW1 <- population$NSW1 + population$ACT1

> # drop regions that aren't part of the study
> population <- population |> select(-c(ACT1, AUS, NT1, WA1))

> # Transform dates to datetime format
> population <- population |>
+   mutate(Date = parse_date(Date, "%b-%Y"))|>
+   filter(between(Date, start_dat .... [TRUNCATED] 

> # Pivot the dataframe to have one column per state
> population <- population |> pivot_longer(cols = -Date, names_to = "regionid", values_to = "popu ..." ... [TRUNCATED] 

> # now linearly interpolate the 3-month data into daily
> # Note that since our main electrical dataset ends on 31st December
> # and this population .... [TRUNCATED] 

> # join to main dataframe
> df <- population |>
+   rename(date_local=Date) |>
+   right_join(df, by=c("regionid", "date_local"))

> # add temperature ---------------------------------------------------------
> 
> 
> # Define the clean and combine function for temperature data
> c .... [TRUNCATED] 

> # Create Temperature Dataframe 
> # Loop through each CSV file in the directory 
> all_temperature <- list()

> for (file_name in list.files(temperature_dir, pattern = "\\.csv$", full.names = TRUE)) {
+   all_temperature[[length(all_temperature) + 1]] <- clean .... [TRUNCATED] 
[1mindexing[0m [34mweather_adelaide.csv[0m [===========================] [32m46.88GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for SA1
[1mindexing[0m [34mweather_brisbane.csv[0m [===========================] [32m17.71GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for QLD1
[1mindexing[0m [34mweather_hobart.csv[0m [===========================--] [32m87.08GB/s[0m, eta: [36m 0s[0m[1mindexing[0m [34mweather_hobart.csv[0m [==============================] [32m2.04GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for TAS1
[1mindexing[0m [34mweather_melbourne.csv[0m [==========================] [32m45.66GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for VIC1
[1mindexing[0m [34mweather_sydney.csv[0m [=============================] [32m52.37GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for NSW1

> # check that we have found some data
> # (i.e. source data not silently missing)
> stopifnot(length(all_temperature) > 0)

> # Merge all temperature data frames
> temperature <- bind_rows(all_temperature)

> # Fill in gaps which are larger than one day in a row by interpolating linearly 
> temperature <- temperature |>
+   group_by(regionid) |>
+   mutat .... [TRUNCATED] 

> # join to main dataframe
> df <- left_join(df, temperature, by=c("regionid", "date_local"))

> # add sunshine ------------------------------------------------------------
> 
> # Define the clean and combine function for sunshine data
> clean_a .... [TRUNCATED] 

> #Create Sunshine Dataframe
> all_sunshine <- list()

> for (file_name in list.files(sunshine_dir, pattern = "\\.csv$", full.names = TRUE)) {
+   all_sunshine[[length(all_sunshine) + 1]] <- clean_and_comb .... [TRUNCATED] 
[1mindexing[0m [34msunshine-bendigo.csv[0m [===========================] [32m14.32GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city bendigo , found  VIC1"
Data cleaned and added to list for VIC1
[1mindexing[0m [34msunshine-cooberpedy.csv[0m [========================] [32m25.58GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city cooberpedy , found  SA1"
Data cleaned and added to list for SA1
[1mindexing[0m [34msunshine-dubbo.csv[0m [=============================] [32m22.65GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city dubbo , found  NSW1"
Data cleaned and added to list for NSW1
[1mindexing[0m [34msunshine-hobart.csv[0m [=============================] [32m8.95GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city hobart , found  TAS1"
Data cleaned and added to list for TAS1
[1mindexing[0m [34msunshine-richmond.csv[0m [==========================] [32m25.61GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city richmond , found  QLD1"
Data cleaned and added to list for QLD1

> # check that we have found some data
> # (i.e. source data not silently missing)
> stopifnot(length(all_sunshine) > 0)

> # Merge all sunshine data frames
> sunshine <- bind_rows(all_sunshine)

> # Fill in gaps which are larger than one day in a row by interpolating linearly 
> sunshine <- sunshine |>
+   group_by(regionid) |>
+   mutate(sola .... [TRUNCATED] 

> # join to main dataframe
> df <- left_join(df, sunshine, by=c("regionid", "date_local"))

> # Wind data ---------------------------------------------------------------
> 
> 
> # fill in that one gap, linear interpolation
> wind <- read_csv( .... [TRUNCATED] 
[1mindexing[0m [34m05-wind.csv[0m [====================================] [32m27.96GB/s[0m, eta: [36m 0s[0m                                                                                                                  
> # we're missing a lot of max wind speed data
> # but only one average wind speed record
> stopifnot(sum(is.na(wind$avg_wind_speed_km_per_h)) <= 1)

> wind <- wind |>
+   group_by(regionid) |>
+   arrange(date) |>
+   mutate(avg_wind_speed_km_per_h = zoo::na.approx(avg_wind_speed_km_per_h, na.rm =  .... [TRUNCATED] 

> # Fill in gaps which are larger than one day in a row by interpolating linearly 
> wind <- wind |>
+   group_by(regionid) |>
+   complete(date_local .... [TRUNCATED] 

> # add to main dataframe
> df <- df |>
+   left_join(wind, by=c("date_local", "regionid"))

> # Per capita calculations -------------------------------------------------
> 
> # do division to get per-capita 
> # also normalise values by chang .... [TRUNCATED] 

> # add midday float --------------------------------------------------------
> # we already have a dummy column for if this half our is a midday cont .... [TRUNCATED] 

> df <- df |>
+   left_join(midday_emissions, by=c("regionid", "date_local")) |>
+   mutate(
+     energy_wh_per_capita_vs_midday=(energy_kwh_per_capi .... [TRUNCATED] 

> # tidy up -----------------------------------------------------------------
> 
> 
> # our weather data, AEMO data etc
> # has slightly different end .... [TRUNCATED] 

> # missing data final check ------------------------------------------------
> 
> # check data has no unexpected holes
> # we know rooftop solar data .... [TRUNCATED] 

> missing <- missing[(missing > 0) & !grepl("rooftop", names(df))]

> stopifnot(length(missing) == 0)

> # Save output -------------------------------------------------------------
> # CSV for stata
> # parquet for the next R script
> 
> 
> write_csv(df .... [TRUNCATED] 
[1mwrote[0m [32m5.83MB[0m in [36m 0s[0m, [32m277.68GB/s[0m[1mwrote[0m [32m81.47MB[0m in [36m 0s[0m, [32m373.85MB/s[0m[1mwrote[0m [32m87.34MB[0m in [36m 0s[0m, [32m382.53MB/s[0m[1mwrote[0m [32m93.18MB[0m in [36m 0s[0m, [32m368.07MB/s[0m[1mwrote[0m [32m99.00MB[0m in [36m 0s[0m, [32m376.01MB/s[0m[1mwrote[0m [32m104.81MB[0m in [36m 0s[0m, [32m374.25MB/s[0m[1mwrote[0m [32m110.62MB[0m in [36m 0s[0m, [32m363.46MB/s[0m[1mwrote[0m [32m116.39MB[0m in [36m 0s[0m, [32m370.94MB/s[0m[1mwrote[0m [32m122.22MB[0m in [36m 0s[0m, [32m360.28MB/s[0m[1mwrote[0m [32m128.09MB[0m in [36m 0s[0m, [32m366.67MB/s[0m[1mwrote[0m [32m133.93MB[0m in [36m 0s[0m, [32m363.09MB/s[0m[1mwrote[0m [32m139.75MB[0m in [36m 0s[0m, [32m365.40MB/s[0m[1mwrote[0m [32m145.56MB[0m in [36m 0s[0m, [32m361.84MB/s[0m[1mwrote[0m [32m151.37MB[0m in [36m 0s[0m, [32m363.41MB/s[0m[1mwrote[0m [32m157.17MB[0m in [36m 0s[0m, [32m360.99MB/s[0m[1mwrote[0m [32m162.99MB[0m in [36m 0s[0m, [32m366.09MB/s[0m[1mwrote[0m [32m168.73MB[0m in [36m 0s[0m, [32m360.33MB/s[0m[1mwrote[0m [32m174.43MB[0m in [36m 0s[0m, [32m362.92MB/s[0m[1mwrote[0m [32m180.15MB[0m in [36m 0s[0m, [32m363.39MB/s[0m[1mwrote[0m [32m185.96MB[0m in [36m 1s[0m, [32m360.71MB/s[0m[1mwrote[0m [32m191.77MB[0m in [36m 1s[0m, [32m365.33MB/s[0m[1mwrote[0m [32m197.59MB[0m in [36m 1s[0m, [32m359.85MB/s[0m[1mwrote[0m [32m203.36MB[0m in [36m 1s[0m, [32m361.94MB/s[0m[1mwrote[0m [32m209.14MB[0m in [36m 1s[0m, [32m358.75MB/s[0m[1mwrote[0m [32m214.86MB[0m in [36m 1s[0m, [32m356.22MB/s[0m[1mwrote[0m [32m220.58MB[0m in [36m 1s[0m, [32m352.76MB/s[0m[1mwrote[0m [32m226.37MB[0m in [36m 1s[0m, [32m350.90MB/s[0m[1mwrote[0m [32m232.06MB[0m in [36m 1s[0m, [32m352.29MB/s[0m[1mwrote[0m [32m237.78MB[0m in [36m 1s[0m, [32m349.32MB/s[0m[1mwrote[0m [32m243.52MB[0m in [36m 1s[0m, [32m351.67MB/s[0m[1mwrote[0m [32m249.32MB[0m in [36m 1s[0m, [32m346.36MB/s[0m[1mwrote[0m [32m255.04MB[0m in [36m 1s[0m, [32m349.60MB/s[0m[1mwrote[0m [32m260.76MB[0m in [36m 1s[0m, [32m344.09MB/s[0m[1mwrote[0m [32m266.55MB[0m in [36m 1s[0m, [32m343.46MB/s[0m[1mwrote[0m [32m272.35MB[0m in [36m 1s[0m, [32m345.45MB/s[0m[1mwrote[0m [32m278.16MB[0m in [36m 1s[0m, [32m341.66MB/s[0m[1mwrote[0m [32m283.90MB[0m in [36m 1s[0m, [32m342.88MB/s[0m[1mwrote[0m [32m289.89MB[0m in [36m 1s[0m, [32m338.11MB/s[0m[1mwrote[0m [32m295.94MB[0m in [36m 1s[0m, [32m340.91MB/s[0m[1mwrote[0m [32m301.96MB[0m in [36m 1s[0m, [32m335.48MB/s[0m[1mwrote[0m [32m308.06MB[0m in [36m 1s[0m, [32m336.71MB/s[0m[1mwrote[0m [32m314.16MB[0m in [36m 1s[0m, [32m336.01MB/s[0m[1mwrote[0m [32m320.27MB[0m in [36m 1s[0m, [32m333.66MB/s[0m[1mwrote[0m [32m326.30MB[0m in [36m 1s[0m, [32m333.72MB/s[0m[1mwrote[0m [32m332.38MB[0m in [36m 1s[0m, [32m335.72MB/s[0m[1mwrote[0m [32m338.45MB[0m in [36m 1s[0m, [32m332.17MB/s[0m[1mwrote[0m [32m344.57MB[0m in [36m 1s[0m, [32m332.78MB/s[0m[1mwrote[0m [32m350.68MB[0m in [36m 1s[0m, [32m331.09MB/s[0m[1mwrote[0m [32m356.73MB[0m in [36m 2s[0m, [32m203.26MB/s[0m[1mwrote[0m [32m362.73MB[0m in [36m 2s[0m, [32m202.42MB/s[0m[1mwrote[0m [32m368.73MB[0m in [36m 2s[0m, [32m204.61MB/s[0m[1mwrote[0m [32m374.77MB[0m in [36m 2s[0m, [32m204.15MB/s[0m[1mwrote[0m [32m380.84MB[0m in [36m 2s[0m, [32m206.10MB/s[0m[1mwrote[0m [32m386.92MB[0m in [36m 2s[0m, [32m206.67MB/s[0m[1mwrote[0m [32m393.01MB[0m in [36m 2s[0m, [32m208.13MB/s[0m[1mwrote[0m [32m399.08MB[0m in [36m 2s[0m, [32m208.94MB/s[0m[1mwrote[0m [32m405.15MB[0m in [36m 2s[0m, [32m211.01MB/s[0m[1mwrote[0m [32m411.24MB[0m in [36m 2s[0m, [32m211.31MB/s[0m[1mwrote[0m [32m417.30MB[0m in [36m 2s[0m, [32m213.09MB/s[0m[1mwrote[0m [32m423.37MB[0m in [36m 2s[0m, [32m213.98MB/s[0m[1mwrote[0m [32m429.42MB[0m in [36m 2s[0m, [32m215.43MB/s[0m[1mwrote[0m [32m435.43MB[0m in [36m 2s[0m, [32m216.23MB/s[0m[1mwrote[0m [32m441.43MB[0m in [36m 2s[0m, [32m217.89MB/s[0m[1mwrote[0m [32m447.55MB[0m in [36m 2s[0m, [32m218.39MB/s[0m[1mwrote[0m [32m453.68MB[0m in [36m 2s[0m, [32m219.95MB/s[0m[1mwrote[0m [32m459.76MB[0m in [36m 2s[0m, [32m220.27MB/s[0m[1mwrote[0m [32m465.84MB[0m in [36m 2s[0m, [32m221.79MB/s[0m[1mwrote[0m [32m471.94MB[0m in [36m 2s[0m, [32m222.24MB/s[0m[1mwrote[0m [32m477.94MB[0m in [36m 2s[0m, [32m224.01MB/s[0m[1mwrote[0m [32m483.94MB[0m in [36m 2s[0m, [32m223.74MB/s[0m[1mwrote[0m [32m489.93MB[0m in [36m 2s[0m, [32m225.49MB/s[0m[1mwrote[0m [32m496.01MB[0m in [36m 2s[0m, [32m225.52MB/s[0m[1mwrote[0m [32m502.18MB[0m in [36m 2s[0m, [32m226.79MB/s[0m[1mwrote[0m [32m508.31MB[0m in [36m 2s[0m, [32m227.60MB/s[0m[1mwrote[0m [32m514.46MB[0m in [36m 2s[0m, [32m228.45MB/s[0m[1mwrote[0m [32m520.57MB[0m in [36m 2s[0m, [32m229.51MB/s[0m[1mwrote[0m [32m526.64MB[0m in [36m 2s[0m, [32m230.95MB/s[0m[1mwrote[0m [32m532.71MB[0m in [36m 2s[0m, [32m231.09MB/s[0m[1mwrote[0m [32m538.72MB[0m in [36m 2s[0m, [32m232.40MB/s[0m[1mwrote[0m [32m544.79MB[0m in [36m 2s[0m, [32m232.16MB/s[0m[1mwrote[0m [32m550.91MB[0m in [36m 2s[0m, [32m233.69MB/s[0m[1mwrote[0m [32m556.95MB[0m in [36m 2s[0m, [32m233.79MB/s[0m[1mwrote[0m [32m562.97MB[0m in [36m 2s[0m, [32m234.88MB/s[0m[1mwrote[0m [32m569.00MB[0m in [36m 2s[0m, [32m235.91MB/s[0m[1mwrote[0m [32m575.00MB[0m in [36m 2s[0m, [32m235.95MB/s[0m[1mwrote[0m [32m581.04MB[0m in [36m 2s[0m, [32m237.31MB/s[0m[1mwrote[0m [32m587.13MB[0m in [36m 2s[0m, [32m238.08MB/s[0m[1mwrote[0m [32m593.21MB[0m in [36m 2s[0m, [32m239.15MB/s[0m                                                                             [1mwrote[0m [32m1.00TB[0m in [36m 2s[0m, [32m403.09GB/s[0m                                                                             
> write_parquet(df, sink = file.path(data_dir, "10-half-hourly.parquet"))
[0m [32m483.94MB[0m in [36m 2s[0m, [32m223.74MB/s[0m[1mwrote[0m [32m489.93MB[0m in [36m 2s[0m, [32m225.49MB/s[0m[1mwrote[0m [32m496.01MB[0m in [36m 2s[0m, [32m225.52MB/s[0m[1mwrote[0m [32m502.18MB[0m in [36m 2s[0m, [32m226.79MB/s[0m[1mwrote[0m [32m508.31MB[0m in [36m 2s[0m, [32m227.60MB/s[0m[1mwrote[0m [32m514.46MB[0m in [36m 2s[0m, [32m228.45MB/s[0m[1mwrote[0m [32m520.57MB[0m in [36m 2s[0m, [32m229.51MB/s[0m[1mwrote[0m [32m526.64MB[0m in [36m 2s[0m, [32m230.95MB/s[0m[1mwrote[0m [32m532.71MB[0m in [36m 2s[0m, [32m231.09MB/s[0m[1mwrote[0m [32m538.72MB[0m in [36m 2s[0m, [32m232.40MB/s[0m[1mwrote[0m [32m544.79MB[0m in [36m 2s[0m, [32m232.16MB/s[0m[1mwrote[0m [32m550.91MB[0m in [36m 2s[0m, [32m233.69MB/s[0m[1mwrote[0m [32m556.95MB[0m in [36m 2s[0m, [32m233.79MB/s[0m[1mwrote[0m [32m562.97MB[0m in [36m 2s[0m, [32m234.88MB/s[0m[1mwrote[0m [32m569.00MB[0m in [36m 2s[0m, [32m235.91MB/s[0m[1mwrote[0m [32m575.00MB[0m in [36m 2s[0m, [32m235.95MB/s[0m[1mwrote[0m [32m581.04MB[0m in [36m 2s[0m, [32m237.31MB/s[0m[1mwrote[0m [32m587.13MB[0m in [36m 2s[0m, [32m238.08MB/s[0m[1mwrote[0m [32m593.21MB[0m in [36m 2s[0m, [32m239.15MB/s[0m                                                                             [1mwrote[0m [32m1.00TB[0m in [36m 2s[0m, [32m403.09GB/s[0m                                                                             
> write_parquet(df, sink = file.path(data_dir, "10-half-hourly.parquet"))
-----------------------
> 
> # relative to this file
> # although you can specify an absolute path if you wish.
> data .... [TRUNCATED] 

> temperature_dir <- file.path(data_dir, 'raw/weather')

> sunshine_dir <- file.path(data_dir, 'raw/sunshine')

> # constants ---------------------------------------------------------------
> 
> 
> Sys.setenv(TZ='UTC') # see README.md

> # AEMO data is in "Market time"
> # that's this time zone
> # (No DST, just UTC+10)
> market_tz <- "Australia/Brisbane"

> # South Australia is permanently behind VIC, NSW, TAS by this much
> # (They shift forward/back on the same day by the same amount)
> SA_offset <- m .... [TRUNCATED] 

> # kilograms per tonne
> kg_per_t <- 1000

> # grams per kilogram
> g_per_kg <- 1000

> # kil-mega-giga watt hour conversion ratios
> wh_per_kwh <- 1000

> kwh_per_mwh <- 1000

> mwh_per_gwh <- 1000

> gwh_per_twh <- 1000

> mwh_per_twh <- mwh_per_gwh * gwh_per_twh

> # minutes per half hour
> min_per_hh <- 30

> # minutes per hour
> min_per_h <- 60

> # Unit conversions:
> # 1 Joule = 1 watt second
> # 1 MJ = 10^6 Ws = 10^3 kWs = 10^3 / 60^2 kWh
> # uppercase M not lowercase, to make it clear this .... [TRUNCATED] 

> # Define the city-region mapping, for weather data to AEMO regions
> # The first one is for capital cities.
> # This is for temperature, which drive .... [TRUNCATED] 

> regional_city_region_map <- c(
+   'cooberpedy' = 'SA1',
+   'richmond' = 'QLD1',
+   'dubbo' = 'NSW1',
+   'bendigo'= 'VIC1',
+   'hobart' = 'TAS1' .... [TRUNCATED] 

> # we are joining lots of different datasets
> # with many different start/end dates
> # the intersection we are aiming for is: (inclusive)
> start_d .... [TRUNCATED] 

> end_date <- make_date(2023, 12, 1)

> # load energy source data --------------------------------------------------------
> 
> energy <- read_parquet(file.path(data_dir, "01-F-aemo-joined ..." ... [TRUNCATED] 

> # Local time, midday control and other time info --------------------------------------
> 
> # We want to convert fixed Brisbane UTC+10 time to loca .... [TRUNCATED] 

> df <- energy |>
+   left_join(region_tz, by=c("regionid")) |>
+   group_by(regionid) |>
+   mutate(
+     hh_end_fixed = force_tz(hh_end, tzone = "A ..." ... [TRUNCATED] 

> # Public Holidays ---------------------------------------------------------
> # we read public holiday data from two files
> # because neither one o .... [TRUNCATED] 
[1mindexing[0m [34mAus_public_hols_2009-2022-1.csv[0m [=================] [32m2.07GB/s[0m, eta: [36m 0s[0m                                                                                                                  
> holidays_2 <- read_csv(file.path(data_dir, "raw/holidays/australian-public-holidays-combined-2021-2024.csv")) |>
+   rename(State=Jurisdiction) |>
+ .... [TRUNCATED] 
[1mindexing[0m [34maustralian-public-holidays-combined-2021-2024.csv[0m [] [32m3.81GB/s[0m, eta: [36m 0s[0m                                                                                                                  
> holidays <- rbind(holidays_1, holidays_2) |>
+   mutate(
+     regionid = paste0(str_to_upper(State), "1"),
+   ) |>
+   select(-State) |>
+   disti .... [TRUNCATED] 

> df <- holidays |>
+   rename(date_local=Date) |>
+   mutate(public_holiday=TRUE) |>
+   right_join(df, by=c("date_local", "regionid")) |> 
+   repla .... [TRUNCATED] 

> # Join DST data to energy -------------------------------------------------
> 
> # dst_transitions has one row per clock change
> # we want to trans .... [TRUNCATED] 
[1mindexing[0m [34m02-dst-dates.csv[0m [===============================] [32m46.36MB/s[0m, eta: [36m 0s[0m                                                                                                                  
> dst_transitions <- dst_transitions |>
+   rename(
+     dst_date = date,
+     dst_direction = direction) |>
+   mutate(
+     dst_direction = facto .... [TRUNCATED] 

> # create a tibble with all dates we care about
> # (plus extra)
> # and the info for the nearest DST transition
> # to make joins later
> dst_dates_ .... [TRUNCATED] 

> # now join DST info to main dataframe
> 
> df <- dst_dates_all |>
+   rename(date_local=d) |>
+   right_join(df, by="date_local") |>
+   mutate(
+   .... [TRUNCATED] 

> no_dst_info <- df |> filter(is.na(dst_now_here))

> stopifnot((no_dst_info |> nrow()) == 0)

> # In our time period, there's one particular day
> # that's 94 days into DST, and one that's -94
> # because the duration of DST (or not) differs sl .... [TRUNCATED] 

> samples_per_days_into_dst <- df |> summarise(n=n(), .by=days_into_dst)

> typical_sample_count <- samples_per_days_into_dst |> pull(n) |> abs() |> median()

> outlier_days <- samples_per_days_into_dst |> filter(abs(n) < typical_sample_count) |> pull(days_into_dst)

> df$days_into_dst_outlier <- df$days_into_dst %in% outlier_days

> # Add population ----------------------------------------------------------
> 
> # Load data
> population_raw <- read_csv(file.path(data_dir, "raw/p ..." ... [TRUNCATED] 
[1mindexing[0m [34mpopulation-australia-raw.csv[0m [====================] [32m2.20GB/s[0m, eta: [36m 0s[0m                                                                                                                  
> # First data cleaning
> # Doesn't work with |> instead of  %>%
> # because of (.)
> population <- population_raw %>%
+   select(1, (ncol(.) - 8):nco .... [TRUNCATED] 

> colnames(population) <- c("Date", "NSW1", "VIC1", "QLD1", "SA1", "WA1", "TAS1", "NT1", "ACT1","AUS")

> # Cast to numbers
> population[2:ncol(population)] <- lapply(population[2:ncol(population)], as.numeric)

> # Include Australian Capital Territory in New South Wales
> population$NSW1 <- population$NSW1 + population$ACT1

> # drop regions that aren't part of the study
> population <- population |> select(-c(ACT1, AUS, NT1, WA1))

> # Transform dates to datetime format
> population <- population |>
+   mutate(Date = parse_date(Date, "%b-%Y"))|>
+   filter(between(Date, start_dat .... [TRUNCATED] 

> # Pivot the dataframe to have one column per state
> population <- population |> pivot_longer(cols = -Date, names_to = "regionid", values_to = "popu ..." ... [TRUNCATED] 

> # now linearly interpolate the 3-month data into daily
> # Note that since our main electrical dataset ends on 31st December
> # and this population .... [TRUNCATED] 

> # join to main dataframe
> df <- population |>
+   rename(date_local=Date) |>
+   right_join(df, by=c("regionid", "date_local"))

> # add temperature ---------------------------------------------------------
> 
> 
> # Define the clean and combine function for temperature data
> c .... [TRUNCATED] 

> # Create Temperature Dataframe 
> # Loop through each CSV file in the directory 
> all_temperature <- list()

> for (file_name in list.files(temperature_dir, pattern = "\\.csv$", full.names = TRUE)) {
+   all_temperature[[length(all_temperature) + 1]] <- clean .... [TRUNCATED] 
[1mindexing[0m [34mweather_adelaide.csv[0m [===========================] [32m46.88GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for SA1
[1mindexing[0m [34mweather_brisbane.csv[0m [===========================] [32m17.71GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for QLD1
[1mindexing[0m [34mweather_hobart.csv[0m [===========================--] [32m87.08GB/s[0m, eta: [36m 0s[0m[1mindexing[0m [34mweather_hobart.csv[0m [==============================] [32m2.04GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for TAS1
[1mindexing[0m [34mweather_melbourne.csv[0m [==========================] [32m45.66GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for VIC1
[1mindexing[0m [34mweather_sydney.csv[0m [=============================] [32m52.37GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for NSW1

> # check that we have found some data
> # (i.e. source data not silently missing)
> stopifnot(length(all_temperature) > 0)

> # Merge all temperature data frames
> temperature <- bind_rows(all_temperature)

> # Fill in gaps which are larger than one day in a row by interpolating linearly 
> temperature <- temperature |>
+   group_by(regionid) |>
+   mutat .... [TRUNCATED] 

> # join to main dataframe
> df <- left_join(df, temperature, by=c("regionid", "date_local"))

> # add sunshine ------------------------------------------------------------
> 
> # Define the clean and combine function for sunshine data
> clean_a .... [TRUNCATED] 

> #Create Sunshine Dataframe
> all_sunshine <- list()

> for (file_name in list.files(sunshine_dir, pattern = "\\.csv$", full.names = TRUE)) {
+   all_sunshine[[length(all_sunshine) + 1]] <- clean_and_comb .... [TRUNCATED] 
[1mindexing[0m [34msunshine-bendigo.csv[0m [===========================] [32m14.32GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city bendigo , found  VIC1"
Data cleaned and added to list for VIC1
[1mindexing[0m [34msunshine-cooberpedy.csv[0m [========================] [32m25.58GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city cooberpedy , found  SA1"
Data cleaned and added to list for SA1
[1mindexing[0m [34msunshine-dubbo.csv[0m [=============================] [32m22.65GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city dubbo , found  NSW1"
Data cleaned and added to list for NSW1
[1mindexing[0m [34msunshine-hobart.csv[0m [=============================] [32m8.95GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city hobart , found  TAS1"
Data cleaned and added to list for TAS1
[1mindexing[0m [34msunshine-richmond.csv[0m [==========================] [32m25.61GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city richmond , found  QLD1"
Data cleaned and added to list for QLD1

> # check that we have found some data
> # (i.e. source data not silently missing)
> stopifnot(length(all_sunshine) > 0)

> # Merge all sunshine data frames
> sunshine <- bind_rows(all_sunshine)

> # Fill in gaps which are larger than one day in a row by interpolating linearly 
> sunshine <- sunshine |>
+   group_by(regionid) |>
+   mutate(sola .... [TRUNCATED] 

> # join to main dataframe
> df <- left_join(df, sunshine, by=c("regionid", "date_local"))

> # Wind data ---------------------------------------------------------------
> 
> 
> # fill in that one gap, linear interpolation
> wind <- read_csv( .... [TRUNCATED] 
[1mindexing[0m [34m05-wind.csv[0m [====================================] [32m27.96GB/s[0m, eta: [36m 0s[0m                                                                                                                  
> # we're missing a lot of max wind speed data
> # but only one average wind speed record
> stopifnot(sum(is.na(wind$avg_wind_speed_km_per_h)) <= 1)

> wind <- wind |>
+   group_by(regionid) |>
+   arrange(date) |>
+   mutate(avg_wind_speed_km_per_h = zoo::na.approx(avg_wind_speed_km_per_h, na.rm =  .... [TRUNCATED] 

> # Fill in gaps which are larger than one day in a row by interpolating linearly 
> wind <- wind |>
+   group_by(regionid) |>
+   complete(date_local .... [TRUNCATED] 

> # add to main dataframe
> df <- df |>
+   left_join(wind, by=c("date_local", "regionid"))

> # Per capita calculations -------------------------------------------------
> 
> # do division to get per-capita 
> # also normalise values by chang .... [TRUNCATED] 

> # add midday float --------------------------------------------------------
> # we already have a dummy column for if this half our is a midday cont .... [TRUNCATED] 

> df <- df |>
+   left_join(midday_emissions, by=c("regionid", "date_local")) |>
+   mutate(
+     energy_wh_per_capita_vs_midday=(energy_kwh_per_capi .... [TRUNCATED] 

> # tidy up -----------------------------------------------------------------
> 
> 
> # our weather data, AEMO data etc
> # has slightly different end .... [TRUNCATED] 

> # missing data final check ------------------------------------------------
> 
> # check data has no unexpected holes
> # we know rooftop solar data .... [TRUNCATED] 

> missing <- missing[(missing > 0) & !grepl("rooftop", names(df))]

> stopifnot(length(missing) == 0)

> # Save output -------------------------------------------------------------
> # CSV for stata
> # parquet for the next R script
> 
> 
> write_csv(df .... [TRUNCATED] 
[1mwrote[0m [32m5.83MB[0m in [36m 0s[0m, [32m277.68GB/s[0m[1mwrote[0m [32m81.47MB[0m in [36m 0s[0m, [32m373.85MB/s[0m[1mwrote[0m [32m87.34MB[0m in [36m 0s[0m, [32m382.53MB/s[0m[1mwrote[0m [32m93.18MB[0m in [36m 0s[0m, [32m368.07MB/s[0m[1mwrote[0m [32m99.00MB[0m in [36m 0s[0m, [32m376.01MB/s[0m[1mwrote[0m [32m104.81MB[0m in [36m 0s[0m, [32m374.25MB/s[0m[1mwrote[0m [32m110.62MB[0m in [36m 0s[0m, [32m363.46MB/s[0m[1mwrote[0m [32m116.39MB[0m in [36m 0s[0m, [32m370.94MB/s[0m[1mwrote[0m [32m122.22MB[0m in [36m 0s[0m, [32m360.28MB/s[0m[1mwrote[0m [32m128.09MB[0m in [36m 0s[0m, [32m366.67MB/s[0m[1mwrote[0m [32m133.93MB[0m in [36m 0s[0m, [32m363.09MB/s[0m[1mwrote[0m [32m139.75MB[0m in [36m 0s[0m, [32m365.40MB/s[0m[1mwrote[0m [32m145.56MB[0m in [36m 0s[0m, [32m361.84MB/s[0m[1mwrote[0m [32m151.37MB[0m in [36m 0s[0m, [32m363.41MB/s[0m[1mwrote[0m [32m157.17MB[0m in [36m 0s[0m, [32m360.99MB/s[0m[1mwrote[0m [32m162.99MB[0m in [36m 0s[0m, [32m366.09MB/s[0m[1mwrote[0m [32m168.73MB[0m in [36m 0s[0m, [32m360.33MB/s[0m[1mwrote[0m [32m174.43MB[0m in [36m 0s[0m, [32m362.92MB/s[0m[1mwrote[0m [32m180.15MB[0m in [36m 0s[0m, [32m363.39MB/s[0m[1mwrote[0m [32m185.96MB[0m in [36m 1s[0m, [32m360.71MB/s[0m[1mwrote[0m [32m191.77MB[0m in [36m 1s[0m, [32m365.33MB/s[0m[1mwrote[0m [32m197.59MB[0m in [36m 1s[0m, [32m359.85MB/s[0m[1mwrote[0m [32m203.36MB[0m in [36m 1s[0m, [32m361.94MB/s[0m[1mwrote[0m [32m209.14MB[0m in [36m 1s[0m, [32m358.75MB/s[0m[1mwrote[0m [32m214.86MB[0m in [36m 1s[0m, [32m356.22MB/s[0m[1mwrote[0m [32m220.58MB[0m in [36m 1s[0m, [32m352.76MB/s[0m[1mwrote[0m [32m226.37MB[0m in [36m 1s[0m, [32m350.90MB/s[0m[1mwrote[0m [32m232.06MB[0m in [36m 1s[0m, [32m352.29MB/s[0m[1mwrote[0m [32m237.78MB[0m in [36m 1s[0m, [32m349.32MB/s[0m[1mwrote[0m [32m243.52MB[0m in [36m 1s[0m, [32m351.67MB/s[0m[1mwrote[0m [32m249.32MB[0m in [36m 1s[0m, [32m346.36MB/s[0m[1mwrote[0m [32m255.04MB[0m in [36m 1s[0m, [32m349.60MB/s[0m[1mwrote[0m [32m260.76MB[0m in [36m 1s[0m, [32m344.09MB/s[0m[1mwrote[0m [32m266.55MB[0m in [36m 1s[0m, [32m343.46MB/s[0m[1mwrote[0m [32m272.35MB[0m in [36m 1s[0m, [32m345.45MB/s[0m[1mwrote[0m [32m278.16MB[0m in [36m 1s[0m, [32m341.66MB/s[0m[1mwrote[0m [32m283.90MB[0m in [36m 1s[0m, [32m342.88MB/s[0m[1mwrote[0m [32m289.89MB[0m in [36m 1s[0m, [32m338.11MB/s[0m[1mwrote[0m [32m295.94MB[0m in [36m 1s[0m, [32m340.91MB/s[0m[1mwrote[0m [32m301.96MB[0m in [36m 1s[0m, [32m335.48MB/s[0m[1mwrote[0m [32m308.06MB[0m in [36m 1s[0m, [32m336.71MB/s[0m[1mwrote[0m [32m314.16MB[0m in [36m 1s[0m, [32m336.01MB/s[0m[1mwrote[0m [32m320.27MB[0m in [36m 1s[0m, [32m333.66MB/s[0m[1mwrote[0m [32m326.30MB[0m in [36m 1s[0m, [32m333.72MB/s[0m[1mwrote[0m [32m332.38MB[0m in [36m 1s[0m, [32m335.72MB/s[0m[1mwrote[0m [32m338.45MB[0m in [36m 1s[0m, [32m332.17MB/s[0m[1mwrote[0m [32m344.57MB[0m in [36m 1s[0m, [32m332.78MB/s[0m[1mwrote[0m [32m350.68MB[0m in [36m 1s[0m, [32m331.09MB/s[0m[1mwrote[0m [32m356.73MB[0m in [36m 2s[0m, [32m203.26MB/s[0m[1mwrote[0m [32m362.73MB[0m in [36m 2s[0m, [32m202.42MB/s[0m[1mwrote[0m [32m368.73MB[0m in [36m 2s[0m, [32m204.61MB/s[0m[1mwrote[0m [32m374.77MB[0m in [36m 2s[0m, [32m204.15MB/s[0m[1mwrote[0m [32m380.84MB[0m in [36m 2s[0m, [32m206.10MB/s[0m[1mwrote[0m [32m386.92MB[0m in [36m 2s[0m, [32m206.67MB/s[0m[1mwrote[0m [32m393.01MB[0m in [36m 2s[0m, [32m208.13MB/s[0m[1mwrote[0m [32m399.08MB[0m in [36m 2s[0m, [32m208.94MB/s[0m[1mwrote[0m [32m405.15MB[0m in [36m 2s[0m, [32m211.01MB/s[0m[1mwrote[0m [32m411.24MB[0m in [36m 2s[0m, [32m211.31MB/s[0m[1mwrote[0m [32m417.30MB[0m in [36m 2s[0m, [32m213.09MB/s[0m[1mwrote[0m [32m423.37MB[0m in [36m 2s[0m, [32m213.98MB/s[0m[1mwrote[0m [32m429.42MB[0m in [36m 2s[0m, [32m215.43MB/s[0m[1mwrote[0m [32m435.43MB[0m in [36m 2s[0m, [32m216.23MB/s[0m[1mwrote[0m [32m441.43MB[0m in [36m 2s[0m, [32m217.89MB/s[0m[1mwrote[0m [32m447.55MB[0m in [36m 2s[0m, [32m218.39MB/s[0m[1mwrote[0m [32m453.68MB[0m in [36m 2s[0m, [32m219.95MB/s[0m[1mwrote[0m [32m459.76MB[0m in [36m 2s[0m, [32m220.27MB/s[0m[1mwrote[0m [32m465.84MB[0m in [36m 2s[0m, [32m221.79MB/s[0m[1mwrote[0m [32m471.94MB[0m in [36m 2s[0m, [32m222.24MB/s[0m[1mwrote[0m [32m477.94MB[0m in [36m 2s[0m, [32m224.01MB/s[0m[1mwrote[0m [32m483.94MB[0m in [36m 2s[0m, [32m223.74MB/s[0m[1mwrote[0m [32m489.93MB[0m in [36m 2s[0m, [32m225.49MB/s[0m[1mwrote[0m [32m496.01MB[0m in [36m 2s[0m, [32m225.52MB/s[0m[1mwrote[0m [32m502.18MB[0m in [36m 2s[0m, [32m226.79MB/s[0m[1mwrote[0m [32m508.31MB[0m in [36m 2s[0m, [32m227.60MB/s[0m[1mwrote[0m [32m514.46MB[0m in [36m 2s[0m, [32m228.45MB/s[0m[1mwrote[0m [32m520.57MB[0m in [36m 2s[0m, [32m229.51MB/s[0m[1mwrote[0m [32m526.64MB[0m in [36m 2s[0m, [32m230.95MB/s[0m[1mwrote[0m [32m532.71MB[0m in [36m 2s[0m, [32m231.09MB/s[0m[1mwrote[0m [32m538.72MB[0m in [36m 2s[0m, [32m232.40MB/s[0m[1mwrote[0m [32m544.79MB[0m in [36m 2s[0m, [32m232.16MB/s[0m[1mwrote[0m [32m550.91MB[0m in [36m 2s[0m, [32m233.69MB/s[0m[1mwrote[0m [32m556.95MB[0m in [36m 2s[0m, [32m233.79MB/s[0m[1mwrote[0m [32m562.97MB[0m in [36m 2s[0m, [32m234.88MB/s[0m[1mwrote[0m [32m569.00MB[0m in [36m 2s[0m, [32m235.91MB/s[0m[1mwrote[0m [32m575.00MB[0m in [36m 2s[0m, [32m235.95MB/s[0m[1mwrote[0m [32m581.04MB[0m in [36m 2s[0m, [32m237.31MB/s[0m[1mwrote[0m [32m587.13MB[0m in [36m 2s[0m, [32m238.08MB/s[0m[1mwrote[0m [32m593.21MB[0m in [36m 2s[0m, [32m239.15MB/s[0m                                                                             [1mwrote[0m [32m1.00TB[0m in [36m 2s[0m, [32m403.09GB/s[0m                                                                             
> write_parquet(df, sink = file.path(data_dir, "10-half-hourly.parquet"))
()

> for (file_name in list.files(temperature_dir, pattern = "\\.csv$", full.names = TRUE)) {
+   all_temperature[[length(all_temperature) + 1]] <- clean .... [TRUNCATED] 
[1mindexing[0m [34mweather_adelaide.csv[0m [===========================] [32m46.88GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for SA1
[1mindexing[0m [34mweather_brisbane.csv[0m [===========================] [32m17.71GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for QLD1
[1mindexing[0m [34mweather_hobart.csv[0m [===========================--] [32m87.08GB/s[0m, eta: [36m 0s[0m[1mindexing[0m [34mweather_hobart.csv[0m [==============================] [32m2.04GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for TAS1
[1mindexing[0m [34mweather_melbourne.csv[0m [==========================] [32m45.66GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for VIC1
[1mindexing[0m [34mweather_sydney.csv[0m [=============================] [32m52.37GB/s[0m, eta: [36m 0s[0m                                                                                                                  Data cleaned and added to list for NSW1

> # check that we have found some data
> # (i.e. source data not silently missing)
> stopifnot(length(all_temperature) > 0)

> # Merge all temperature data frames
> temperature <- bind_rows(all_temperature)

> # Fill in gaps which are larger than one day in a row by interpolating linearly 
> temperature <- temperature |>
+   group_by(regionid) |>
+   mutat .... [TRUNCATED] 

> # join to main dataframe
> df <- left_join(df, temperature, by=c("regionid", "date_local"))

> # add sunshine ------------------------------------------------------------
> 
> # Define the clean and combine function for sunshine data
> clean_a .... [TRUNCATED] 

> #Create Sunshine Dataframe
> all_sunshine <- list()

> for (file_name in list.files(sunshine_dir, pattern = "\\.csv$", full.names = TRUE)) {
+   all_sunshine[[length(all_sunshine) + 1]] <- clean_and_comb .... [TRUNCATED] 
[1mindexing[0m [34msunshine-bendigo.csv[0m [===========================] [32m14.32GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city bendigo , found  VIC1"
Data cleaned and added to list for VIC1
[1mindexing[0m [34msunshine-cooberpedy.csv[0m [========================] [32m25.58GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city cooberpedy , found  SA1"
Data cleaned and added to list for SA1
[1mindexing[0m [34msunshine-dubbo.csv[0m [=============================] [32m22.65GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city dubbo , found  NSW1"
Data cleaned and added to list for NSW1
[1mindexing[0m [34msunshine-hobart.csv[0m [=============================] [32m8.95GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city hobart , found  TAS1"
Data cleaned and added to list for TAS1
[1mindexing[0m [34msunshine-richmond.csv[0m [==========================] [32m25.61GB/s[0m, eta: [36m 0s[0m                                                                                                                  [1] "Trying to find region for city richmond , found  QLD1"
Data cleaned and added to list for QLD1

> # check that we have found some data
> # (i.e. source data not silently missing)
> stopifnot(length(all_sunshine) > 0)

> # Merge all sunshine data frames
> sunshine <- bind_rows(all_sunshine)

> # Fill in gaps which are larger than one day in a row by interpolating linearly 
> sunshine <- sunshine |>
+   group_by(regionid) |>
+   mutate(sola .... [TRUNCATED] 

> # join to main dataframe
> df <- left_join(df, sunshine, by=c("regionid", "date_local"))

> # Wind data ---------------------------------------------------------------
> 
> 
> # fill in that one gap, linear interpolation
> wind <- read_csv( .... [TRUNCATED] 
[1mindexing[0m [34m05-wind.csv[0m [====================================] [32m27.96GB/s[0m, eta: [36m 0s[0m                                                                                                                  
> # we're missing a lot of max wind speed data
> # but only one average wind speed record
> stopifnot(sum(is.na(wind$avg_wind_speed_km_per_h)) <= 1)

> wind <- wind |>
+   group_by(regionid) |>
+   arrange(date) |>
+   mutate(avg_wind_speed_km_per_h = zoo::na.approx(avg_wind_speed_km_per_h, na.rm =  .... [TRUNCATED] 

> # Fill in gaps which are larger than one day in a row by interpolating linearly 
> wind <- wind |>
+   group_by(regionid) |>
+   complete(date_local .... [TRUNCATED] 

> # add to main dataframe
> df <- df |>
+   left_join(wind, by=c("date_local", "regionid"))

> # Per capita calculations -------------------------------------------------
> 
> # do division to get per-capita 
> # also normalise values by chang .... [TRUNCATED] 

> # add midday float --------------------------------------------------------
> # we already have a dummy column for if this half our is a midday cont .... [TRUNCATED] 

> df <- df |>
+   left_join(midday_emissions, by=c("regionid", "date_local")) |>
+   mutate(
+     energy_wh_per_capita_vs_midday=(energy_kwh_per_capi .... [TRUNCATED] 

> # tidy up -----------------------------------------------------------------
> 
> 
> # our weather data, AEMO data etc
> # has slightly different end .... [TRUNCATED] 

> # missing data final check ------------------------------------------------
> 
> # check data has no unexpected holes
> # we know rooftop solar data .... [TRUNCATED] 

> missing <- missing[(missing > 0) & !grepl("rooftop", names(df))]

> stopifnot(length(missing) == 0)

> # Save output -------------------------------------------------------------
> # CSV for stata
> # parquet for the next R script
> 
> 
> write_csv(df .... [TRUNCATED] 
[1mwrote[0m [32m5.83MB[0m in [36m 0s[0m, [32m277.68GB/s[0m[1mwrote[0m [32m81.47MB[0m in [36m 0s[0m, [32m373.85MB/s[0m[1mwrote[0m [32m87.34MB[0m in [36m 0s[0m, [32m382.53MB/s[0m[1mwrote[0m [32m93.18MB[0m in [36m 0s[0m, [32m368.07MB/s[0m[1mwrote[0m [32m99.00MB[0m in [36m 0s[0m, [32m376.01MB/s[0m[1mwrote[0m [32m104.81MB[0m in [36m 0s[0m, [32m374.25MB/s[0m[1mwrote[0m [32m110.62MB[0m in [36m 0s[0m, [32m363.46MB/s[0m[1mwrote[0m [32m116.39MB[0m in [36m 0s[0m, [32m370.94MB/s[0m[1mwrote[0m [32m122.22MB[0m in [36m 0s[0m, [32m360.28MB/s[0m[1mwrote[0m [32m128.09MB[0m in [36m 0s[0m, [32m366.67MB/s[0m[1mwrote[0m [32m133.93MB[0m in [36m 0s[0m, [32m363.09MB/s[0m[1mwrote[0m [32m139.75MB[0m in [36m 0s[0m, [32m365.40MB/s[0m[1mwrote[0m [32m145.56MB[0m in [36m 0s[0m, [32m361.84MB/s[0m[1mwrote[0m [32m151.37MB[0m in [36m 0s[0m, [32m363.41MB/s[0m[1mwrote[0m [32m157.17MB[0m in [36m 0s[0m, [32m360.99MB/s[0m[1mwrote[0m [32m162.99MB[0m in [36m 0s[0m, [32m366.09MB/s[0m[1mwrote[0m [32m168.73MB[0m in [36m 0s[0m, [32m360.33MB/s[0m[1mwrote[0m [32m174.43MB[0m in [36m 0s[0m, [32m362.92MB/s[0m[1mwrote[0m [32m180.15MB[0m in [36m 0s[0m, [32m363.39MB/s[0m[1mwrote[0m [32m185.96MB[0m in [36m 1s[0m, [32m360.71MB/s[0m[1mwrote[0m [32m191.77MB[0m in [36m 1s[0m, [32m365.33MB/s[0m[1mwrote[0m [32m197.59MB[0m in [36m 1s[0m, [32m359.85MB/s[0m[1mwrote[0m [32m203.36MB[0m in [36m 1s[0m, [32m361.94MB/s[0m[1mwrote[0m [32m209.14MB[0m in [36m 1s[0m, [32m358.75MB/s[0m[1mwrote[0m [32m214.86MB[0m in [36m 1s[0m, [32m356.22MB/s[0m[1mwrote[0m [32m220.58MB[0m in [36m 1s[0m, [32m352.76MB/s[0m[1mwrote[0m [32m226.37MB[0m in [36m 1s[0m, [32m350.90MB/s[0m[1mwrote[0m [32m232.06MB[0m in [36m 1s[0m, [32m352.29MB/s[0m[1mwrote[0m [32m237.78MB[0m in [36m 1s[0m, [32m349.32MB/s[0m[1mwrote[0m [32m243.52MB[0m in [36m 1s[0m, [32m351.67MB/s[0m[1mwrote[0m [32m249.32MB[0m in [36m 1s[0m, [32m346.36MB/s[0m[1mwrote[0m [32m255.04MB[0m in [36m 1s[0m, [32m349.60MB/s[0m[1mwrote[0m [32m260.76MB[0m in [36m 1s[0m, [32m344.09MB/s[0m[1mwrote[0m [32m266.55MB[0m in [36m 1s[0m, [32m343.46MB/s[0m[1mwrote[0m [32m272.35MB[0m in [36m 1s[0m, [32m345.45MB/s[0m[1mwrote[0m [32m278.16MB[0m in [36m 1s[0m, [32m341.66MB/s[0m[1mwrote[0m [32m283.90MB[0m in [36m 1s[0m, [32m342.88MB/s[0m[1mwrote[0m [32m289.89MB[0m in [36m 1s[0m, [32m338.11MB/s[0m[1mwrote[0m [32m295.94MB[0m in [36m 1s[0m, [32m340.91MB/s[0m[1mwrote[0m [32m301.96MB[0m in [36m 1s[0m, [32m335.48MB/s[0m[1mwrote[0m [32m308.06MB[0m in [36m 1s[0m, [32m336.71MB/s[0m[1mwrote[0m [32m314.16MB[0m in [36m 1s[0m, [32m336.01MB/s[0m[1mwrote[0m [32m320.27MB[0m in [36m 1s[0m, [32m333.66MB/s[0m[1mwrote[0m [32m326.30MB[0m in [36m 1s[0m, [32m333.72MB/s[0m[1mwrote[0m [32m332.38MB[0m in [36m 1s[0m, [32m335.72MB/s[0m[1mwrote[0m [32m338.45MB[0m in [36m 1s[0m, [32m332.17MB/s[0m[1mwrote[0m [32m344.57MB[0m in [36m 1s[0m, [32m332.78MB/s[0m[1mwrote[0m [32m350.68MB[0m in [36m 1s[0m, [32m331.09MB/s[0m[1mwrote[0m [32m356.73MB[0m in [36m 2s[0m, [32m203.26MB/s[0m[1mwrote[0m [32m362.73MB[0m in [36m 2s[0m, [32m202.42MB/s[0m[1mwrote[0m [32m368.73MB[0m in [36m 2s[0m, [32m204.61MB/s[0m[1mwrote[0m [32m374.77MB[0m in [36m 2s[0m, [32m204.15MB/s[0m[1mwrote[0m [32m380.84MB[0m in [36m 2s[0m, [32m206.10MB/s[0m[1mwrote[0m [32m386.92MB[0m in [36m 2s[0m, [32m206.67MB/s[0m[1mwrote[0m [32m393.01MB[0m in [36m 2s[0m, [32m208.13MB/s[0m[1mwrote[0m [32m399.08MB[0m in [36m 2s[0m, [32m208.94MB/s[0m[1mwrote[0m [32m405.15MB[0m in [36m 2s[0m, [32m211.01MB/s[0m[1mwrote[0m [32m411.24MB[0m in [36m 2s[0m, [32m211.31MB/s[0m[1mwrote[0m [32m417.30MB[0m in [36m 2s[0m, [32m213.09MB/s[0m[1mwrote[0m [32m423.37MB[0m in [36m 2s[0m, [32m213.98MB/s[0m[1mwrote[0m [32m429.42MB[0m in [36m 2s[0m, [32m215.43MB/s[0m[1mwrote[0m [32m435.43MB[0m in [36m 2s[0m, [32m216.23MB/s[0m[1mwrote[0m [32m441.43MB[0m in [36m 2s[0m, [32m217.89MB/s[0m[1mwrote[0m [32m447.55MB[0m in [36m 2s[0m, [32m218.39MB/s[0m[1mwrote[0m [32m453.68MB[0m in [36m 2s[0m, [32m219.95MB/s[0m[1mwrote[0m [32m459.76MB[0m in [36m 2s[0m, [32m220.27MB/s[0m[1mwrote[0m [32m465.84MB[0m in [36m 2s[0m, [32m221.79MB/s[0m[1mwrote[0m [32m471.94MB[0m in [36m 2s[0m, [32m222.24MB/s[0m[1mwrote[0m [32m477.94MB[0m in [36m 2s[0m, [32m224.01MB/s[0m[1mwrote[0m [32m483.94MB[0m in [36m 2s[0m, [32m223.74MB/s[0m[1mwrote[0m [32m489.93MB[0m in [36m 2s[0m, [32m225.49MB/s[0m[1mwrote[0m [32m496.01MB[0m in [36m 2s[0m, [32m225.52MB/s[0m[1mwrote[0m [32m502.18MB[0m in [36m 2s[0m, [32m226.79MB/s[0m[1mwrote[0m [32m508.31MB[0m in [36m 2s[0m, [32m227.60MB/s[0m[1mwrote[0m [32m514.46MB[0m in [36m 2s[0m, [32m228.45MB/s[0m[1mwrote[0m [32m520.57MB[0m in [36m 2s[0m, [32m229.51MB/s[0m[1mwrote[0m [32m526.64MB[0m in [36m 2s[0m, [32m230.95MB/s[0m[1mwrote[0m [32m532.71MB[0m in [36m 2s[0m, [32m231.09MB/s[0m[1mwrote[0m [32m538.72MB[0m in [36m 2s[0m, [32m232.40MB/s[0m[1mwrote[0m [32m544.79MB[0m in [36m 2s[0m, [32m232.16MB/s[0m[1mwrote[0m [32m550.91MB[0m in [36m 2s[0m, [32m233.69MB/s[0m[1mwrote[0m [32m556.95MB[0m in [36m 2s[0m, [32m233.79MB/s[0m[1mwrote[0m [32m562.97MB[0m in [36m 2s[0m, [32m234.88MB/s[0m[1mwrote[0m [32m569.00MB[0m in [36m 2s[0m, [32m235.91MB/s[0m[1mwrote[0m [32m575.00MB[0m in [36m 2s[0m, [32m235.95MB/s[0m[1mwrote[0m [32m581.04MB[0m in [36m 2s[0m, [32m237.31MB/s[0m[1mwrote[0m [32m587.13MB[0m in [36m 2s[0m, [32m238.08MB/s[0m[1mwrote[0m [32m593.21MB[0m in [36m 2s[0m, [32m239.15MB/s[0m                                                                             [1mwrote[0m [32m1.00TB[0m in [36m 2s[0m, [32m403.09GB/s[0m                                                                             
> write_parquet(df, sink = file.path(data_dir, "10-half-hourly.parquet"))
m[1mwrote[0m [32m587.13MB[0m in [36m 2s[0m, [32m238.08MB/s[0m[1mwrote[0m [32m593.21MB[0m in [36m 2s[0m, [32m239.15MB/s[0m                                                                             [1mwrote[0m [32m1.00TB[0m in [36m 2s[0m, [32m403.09GB/s[0m                                                                             
> write_parquet(df, sink = file.path(data_dir, "10-half-hourly.parquet"))
